<script lang="ts">
	import { onMount, tick } from 'svelte';
	import { browser } from '$app/environment';

	export let data: any;  

	let d3: any;
	let svg: any;
	let container: HTMLElement;

	onMount(async () => {
		if (browser) {
			d3 = await import('d3');  
			await tick();
			if (data) {
				// Update container size to match design dimensions
				container.style.width = `${data[0]?.design?.width || 800}px`;
				container.style.height = `${data[0]?.design?.height || 600}px`;
				loadSeats();
			} else {
				console.error("Data is not provided!");
			}
		}
	});

	// Load and render the data
	const loadSeats = () => {
		if (!data || !data[0]?.design?.objects) {
			console.error("No design objects found in the data!");
			return;
		}

		// Set up SVG with proper dimensions and viewBox
		const designWidth = data[0]?.design?.width || 800;
		const designHeight = data[0]?.design?.height || 600;

		svg = d3.select('#seating-chart')
			.attr('width', '100%')
			.attr('height', '100%')
			.attr('viewBox', `0 0 ${designWidth} ${designHeight}`)
			.attr('preserveAspectRatio', 'xMidYMid meet')
			.style('background-color', '#ffffff');

		// Clear previous elements
		svg.selectAll('*').remove();

		// Create a main group for all elements
		const mainGroup = svg.append('g');

		// Render objects
		data[0]?.design?.objects.forEach((obj: any) => {
			// Skip objects with no position data
			if (typeof obj.left === 'undefined' || typeof obj.top === 'undefined') {
				return;
			}

			switch (obj.type) {
				case 'rect':
					renderRect(mainGroup, obj);
					break;
				case 'i-text':
					renderText(mainGroup, obj);
					break;
				case 'group':
					renderGroup(mainGroup, obj);
					break;
				case 'triangle':
					renderTriangle(mainGroup, obj);
					break;
				default:
					console.warn(`Unsupported object type: ${obj.type}`);
			}
		});
	};

	const renderRect = (group: any, obj: any) => {
		const x = obj.left;
		const y = obj.top;
		const width = obj.width * (obj.scaleX || 1);
		const height = obj.height * (obj.scaleY || 1);
		
		group.append('rect')
			.attr('x', x)
			.attr('y', y)
			.attr('width', width)
			.attr('height', height)
			.attr('fill', obj.fill || 'transparent')
			.attr('stroke', obj.stroke || 'none')
			.attr('stroke-width', obj.strokeWidth || 0)
			.attr('id', obj.id)
			.attr('transform', obj.angle ? `rotate(${obj.angle}, ${x + width/2}, ${y + height/2})` : null);
	};

	const renderText = (group: any, obj: any) => {
		const x = obj.left;
		const y = obj.top;
		
		group.append('text')
			.attr('x', x)
			.attr('y', y + (obj.fontSize || 20)) // Add fontSize to y for proper text alignment
			.attr('font-size', obj.fontSize || 20)
			.attr('font-family', obj.fontFamily || 'Times New Roman')
			.attr('fill', obj.fill || '#000')
			.text(obj.text || '')
			.attr('transform', obj.angle ? `rotate(${obj.angle}, ${x}, ${y})` : null);
	};

	const renderTriangle = (group: any, obj: any) => {
		const x = obj.left;
		const y = obj.top;
		const width = obj.width * (obj.scaleX || 1);
		const height = obj.height * (obj.scaleY || 1);
		
		const points = [
			`${x},${y + height}`,
			`${x + width/2},${y}`,
			`${x + width},${y + height}`
		].join(' ');
		
		group.append('polygon')
			.attr('points', points)
			.attr('fill', obj.fill || 'transparent')
			.attr('stroke', obj.stroke || 'none')
			.attr('stroke-width', obj.strokeWidth || 0)
			.attr('transform', obj.angle ? `rotate(${obj.angle}, ${x + width/2}, ${y + height/2})` : null);
	};

	const renderGroup = (group: any, obj: any) => {
		const subgroup = group.append('g')
			.attr('transform', `translate(${obj.left || 0}, ${obj.top || 0})`);

		if (obj.angle) {
			subgroup.attr('transform', `${subgroup.attr('transform')} rotate(${obj.angle})`);
		}

		obj.objects?.forEach((childObj: any) => {
			// Adjust child object positions relative to group
			const adjustedObj = {
				...childObj,
				left: (childObj.left || 0),
				top: (childObj.top || 0)
			};

			switch (childObj.type) {
				case 'rect':
					renderRect(subgroup, adjustedObj);
					break;
				case 'i-text':
					renderText(subgroup, adjustedObj);
					break;
				case 'triangle':
					renderTriangle(subgroup, adjustedObj);
					break;
				default:
					console.warn(`Unsupported child object type in group: ${childObj.type}`);
			}
		});
	};
</script>

<div class="seating-container" bind:this={container}>
	<svg id="seating-chart"></svg>
</div>

<style>
	.seating-container {
		position: relative;
		overflow: hidden;
	}

	#seating-chart {
		width: 100%;
		height: 100%;
	}
</style>
